// <auto-generated />
using System;
using ArtistAwards.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ArtistAwards.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221114020426_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:uuid-ossp", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ArtistAwards.Poll", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("CreatorId")
                        .HasColumnName("creator_id")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnName("status_id")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("polls");
                });

            modelBuilder.Entity("ArtistAwards.PollOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnName("content")
                        .HasColumnType("character varying");

                    b.Property<Guid>("PollId")
                        .HasColumnName("poll_id")
                        .HasColumnType("uuid");

                    b.Property<int?>("Votes")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("votes")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("0");

                    b.HasKey("Id");

                    b.HasIndex("PollId");

                    b.ToTable("poll_options");
                });

            modelBuilder.Entity("ArtistAwards.PollStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("poll_statuses");
                });

            modelBuilder.Entity("ArtistAwards.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<DateTime>("Expires")
                        .HasColumnName("expires")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnName("token")
                        .HasColumnType("character varying");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("refresh_tokens");
                });

            modelBuilder.Entity("ArtistAwards.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("ArtistAwards.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Passwordhash")
                        .IsRequired()
                        .HasColumnName("passwordhash")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("users_email_key");

                    b.ToTable("users");
                });

            modelBuilder.Entity("ArtistAwards.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Roleid")
                        .HasColumnName("roleid")
                        .HasColumnType("integer");

                    b.Property<int>("Userid")
                        .HasColumnName("userid")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Roleid");

                    b.HasIndex("Userid");

                    b.ToTable("userroles");
                });

            modelBuilder.Entity("ArtistAwards.UserVotes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<Guid>("PollId")
                        .HasColumnName("poll_id")
                        .HasColumnType("uuid");

                    b.Property<int>("PollOptionId")
                        .HasColumnName("poll_option_id")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PollId");

                    b.HasIndex("PollOptionId");

                    b.ToTable("user_votes");
                });

            modelBuilder.Entity("ArtistAwards.Poll", b =>
                {
                    b.HasOne("ArtistAwards.PollStatus", "Status")
                        .WithMany("Polls")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("polls_status_id_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("ArtistAwards.PollOption", b =>
                {
                    b.HasOne("ArtistAwards.Poll", "Poll")
                        .WithMany("PollOptions")
                        .HasForeignKey("PollId")
                        .HasConstraintName("poll_options_poll_id_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("ArtistAwards.RefreshToken", b =>
                {
                    b.HasOne("ArtistAwards.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .HasConstraintName("refreshtokens_users_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("ArtistAwards.UserRole", b =>
                {
                    b.HasOne("ArtistAwards.Role", "Role")
                        .WithMany()
                        .HasForeignKey("Roleid")
                        .HasConstraintName("userroles_roleid_fkey")
                        .IsRequired();

                    b.HasOne("ArtistAwards.User", "User")
                        .WithMany()
                        .HasForeignKey("Userid")
                        .HasConstraintName("userroles_userid_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("ArtistAwards.UserVotes", b =>
                {
                    b.HasOne("ArtistAwards.Poll", "Poll")
                        .WithMany("UserVotes")
                        .HasForeignKey("PollId")
                        .HasConstraintName("user_votes_poll_id_fkey")
                        .IsRequired();

                    b.HasOne("ArtistAwards.PollOption", "PollOption")
                        .WithMany("UserVotes")
                        .HasForeignKey("PollOptionId")
                        .HasConstraintName("user_votes_poll_option_id_fkey")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
